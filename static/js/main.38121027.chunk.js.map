{"version":3,"sources":["BuildingsByZone.js","App.js","serviceWorker.js","index.js"],"names":["BuildingsByZong","props","console","log","data","className","zoneName","sort","a","b","name","map","value","index","black","key","href","App","state","isLoading","error","buildingZones","buildings","this","setState","fetch","then","response","json","content","getBuildingZone","items","building","element","buildingzone","obj","buildingname","push","Object","keys","item","includes","BuildingsByZone","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sPA0BeA,MAvBf,SAAyBC,GAGrB,OADAC,QAAQC,IAAIF,EAAMG,MAEd,yBAAKC,UAAU,QACX,4BACKJ,EAAMK,UAEX,yBAAKD,UAAU,aACdJ,EAAMG,KAAKG,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEE,KAAOD,EAAEC,KAAQ,GAAI,KAAGC,KAAI,SAACC,EAAMC,GAC5D,OAAGD,EAAME,MACE,uBAAGC,IAAKF,EAAOR,UAAU,gBAAgBO,EAAMF,MAG/C,uBAAGK,IAAKF,EAAOR,UAAU,eAAeW,KAAK,gDAAgDJ,EAAMF,UAIlH,+BCwEGO,G,wDArFb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXd,KAAK,GACLe,WAAW,EACXC,MAAM,KACNC,cAAc,GACdC,UAAU,IAPK,E,gEAWE,IAAD,OAClBC,KAAKC,SAAS,CAAEL,WAAW,IAC3BM,MAhBQ,kTAiBLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,gBAAgBD,EAAQzB,KAAK2B,OAClC,EAAKP,SAAS,CAACpB,KAAMyB,EAAQzB,KAAK2B,MAAOZ,WAAW,IACpDjB,QAAQC,IAAI0B,Q,sCAMFzB,GACd,IAAI4B,EAAW,GACf5B,EAAKO,KAAI,SAAAsB,GACP,GAA4B,KAAzBA,EAAQC,aACT,GAAKD,EAAQC,gBAAgBF,EAQxB,CACCG,EAAM,CACRzB,KAAMuB,EAAQG,aACdtB,MAAOmB,EAAQnB,OAEjBkB,EAASC,EAAQC,cAAcG,KAAKF,OAbE,CACtCH,EAASC,EAAQC,cAAgB,GACjC,IAAIC,EAAM,CACRzB,KAAMuB,EAAQG,aACdtB,MAAOmB,EAAQnB,OAEjBkB,EAASC,EAAQC,cAAcG,KAAKF,OAa1CjC,QAAQC,IAAI6B,GAEZT,KAAKC,SAAS,CAACF,UAAWU,M,+BAK1B,IAAMV,EAAaC,KAAKL,MAAMI,UAE9B,OADkBC,KAAKL,MAAMC,UAEpB,0CAETjB,QAAQC,IAAImB,GAER,yBAAKjB,UAAU,OACb,qCACA,6BACCiC,OAAOC,KAAKjB,GAAWf,OAAOI,KAAI,SAAC6B,GAClC,IAAIA,EAAKC,SAAS,SAEhB,OADAvC,QAAQC,IAAImB,EAAUkB,IACf,kBAACE,EAAD,CAAiBpC,SAAUkC,EAAMpC,KAAMkB,EAAUkB,QAK3DF,OAAOC,KAAKjB,GAAWf,OAAOI,KAAI,SAAC6B,GAClC,GAAGA,EAAKC,SAAS,SAEf,OADAvC,QAAQC,IAAImB,EAAUkB,IACf,kBAACE,EAAD,CAAiBpC,SAAUkC,EAAMpC,KAAMkB,EAAUkB,c,GA5EpDG,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLlB,QAAQkB,MAAMA,EAAMwC,a","file":"static/js/main.38121027.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction BuildingsByZong(props) {\n\n    console.log(props.data);\n    return (\n        <div className=\"zone\">\n            <h2>\n                {props.zoneName}\n            </h2>\n            <div className=\"container\">\n            {props.data.sort((a,b) => (a.name > b.name) ? 1: -1).map((value,index) => {\n                if(value.black) {\n                    return <p key={index} className=\"buildinglink\">{value.name}</p>\n                }\n                else {\n                    return <a key={index} className=\"buildinglink\" href=\"https://applefacilities.review.blueriver.com\">{value.name}</a>\n                }\n            })}\n            </div>\n            <br></br>\n        </div>\n    );\n}\n\nexport default BuildingsByZong;","import React, {Component} from 'react';\nimport './App.css';\nimport BuildingsByZone from './BuildingsByZone'\nimport { black } from 'color-name';\n\nconst url = \"https://applefacilities.review.blueriver.com/index.cfm/_api/json/v1/scv/building/?andOpenGrouping&locationCode%5B0%5D=sqo&or&locationCode%5B2%5D=nwr&or&locationCode%5B4%5D=scv&or&locationCode%5B6%5D=sfo&closeGrouping&fields=buildingname,buildingabbr,lat,lng,black,buildingZone&active=1&cachedwithin=600\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data:[],\n      isLoading: false,\n      error:null,\n      buildingZones:[],\n      buildings:{},\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true});\n    fetch(url)\n      .then(response => response.json())\n      .then(content => {\n        this.getBuildingZone(content.data.items);\n        this.setState({data: content.data.items, isLoading: false})\n        console.log(content);\n      })\n    \n  }\n\n\n  getBuildingZone(data) {\n    var building = {};\n    data.map(element => {\n      if(element.buildingzone !== \"\") {\n        if(!(element.buildingzone in building)) {\n          building[element.buildingzone] = [];\n          var obj = {\n            name: element.buildingname,\n            black: element.black,\n          }\n          building[element.buildingzone].push(obj);\n        }\n        else {\n          var obj = {\n            name: element.buildingname,\n            black: element.black,\n          }\n          building[element.buildingzone].push(obj);\n        }\n      }\n      \n    });\n\n    console.log(building);\n    \n    this.setState({buildings: building});\n  }\n\n\n  render() {\n    const buildings  = this.state.buildings;\n    const isLoading = this.state.isLoading;\n    if(isLoading) {\n      return <p>Loading...</p>\n    }\n    console.log(buildings);\n      return (\n        <div className=\"App\">\n          <h1>Index</h1>\n          <br></br>\n          {Object.keys(buildings).sort().map((item) => {\n            if(!item.includes(\"Other\")) {\n              console.log(buildings[item]);\n              return <BuildingsByZone zoneName={item} data={buildings[item]} />;\n            }\n          })\n\n          }\n          {Object.keys(buildings).sort().map((item) => {\n            if(item.includes(\"Other\")) {\n              console.log(buildings[item]);\n              return <BuildingsByZone zoneName={item} data={buildings[item]} />;\n            }\n          })\n\n          }\n        </div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}